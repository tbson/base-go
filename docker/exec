#!/bin/bash


NAME="basecode"

FIRST_ARG="$1"
shift
ARGS="$@"

docker_down () {
    COMPOSE_HTTP_TIMEOUT=512 docker compose down --volumes
    docker-clean
}

docker_up () {
    COMPOSE_HTTP_TIMEOUT=512 docker compose up -d
}

help () {
    echo "build             :  build docker instance"
    echo "up                :  up docker instance"
    echo "down              :  down docker inscance"
    echo "restart           :  down then up docker instance"
    echo "bserver           :  run phoenix dev server"
    echo "fserver           :  run frontendpack dev server"
    echo "yarn              :  run yarn on frontend"
    echo "command <args>    :   run spefic command on backend/src/command"
    echo "backend <args>    :  execute random command on backend, ex: ./exec backend ls"
}

if [ "$FIRST_ARG" == "-h" ]; then
    help
    exit 0
fi

if [ "$FIRST_ARG" == "backend" ] || [ "$FIRST_ARG" == "db" ] || [ "$FIRST_ARG" == "frontend" ]; then
    docker compose exec "$NAME"_"$FIRST_ARG" $ARGS
elif [ "$FIRST_ARG" == "yarn" ]; then
    docker compose exec "$NAME"_frontend yarn $ARGS
elif [ "$FIRST_ARG" == "fserver" ]; then
    docker compose exec "$NAME"_frontend yarn dev
elif [ "$FIRST_ARG" == "fmakemessages" ]; then
    docker compose exec "$NAME"_frontend node_modules/.bin/ttag update src/locale/vi.po src
    docker compose exec "$NAME"_frontend node_modules/.bin/ttag update src/locale/en.po src
elif [ "$FIRST_ARG" == "fdumpmessages" ]; then
    docker compose exec "$NAME"_frontend node_modules/.bin/ttag po2json src/locale/vi.po > ../frontend/src/locale/vi.po.json
    docker compose exec "$NAME"_frontend node_modules/.bin/ttag po2json src/locale/en.po > ../frontend/src/locale/en.po.json
elif [ "$FIRST_ARG" == "go" ]; then
    docker compose exec "$NAME"_backend go $ARGS
elif [ "$FIRST_ARG" == "command" ]; then
    docker compose exec "$NAME"_backend go run ./command/$ARGS
elif [ "$FIRST_ARG" == "initmigrations" ]; then
    docker compose exec "$NAME"_backend atlas migrate hash --env gorm
elif [ "$FIRST_ARG" == "makemigrations" ]; then
    docker compose exec "$NAME"_backend atlas migrate diff --env gorm
elif [ "$FIRST_ARG" == "migrate" ]; then
    docker compose exec "$NAME"_backend atlas migrate apply --env gorm
elif [ "$FIRST_ARG" == "bserver" ]; then
    docker compose exec "$NAME"_backend air src/server.go --root src
elif [ "$FIRST_ARG" == "up" ]; then
    docker_up
elif [ "$FIRST_ARG" == "down" ]; then
    docker_down
elif [ "$FIRST_ARG" == "restart" ]; then
    docker_down
    docker_up
elif [ "$FIRST_ARG" == "build" ]; then
    docker compose build --no-cache
elif [ "$FIRST_ARG" == "pg_dump" ]; then
    docker compose exec "$NAME"_db pg_dump $ARGS
else
    echo "Invalid argument, please use following arguments:"
    echo "-------------------------------------------------"
    help
fi
